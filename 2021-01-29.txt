Today I learned

* 필요한 경우에만 DOM을 업데이트 합니다. 

* 주의: 컴포넌트의 이름은 항상 대문자로 시작합니다.
React는 소문자로 시작하는 컴포넌트를 DOM 태그로 처리합니다. 예를 들어 <div />는 HTML div 태그를 나타내지만, <Welcome />은 컴포넌트를 나타내며 범위 안에 Welcome이 있어야 합니다.
https://ko.reactjs.org/docs/jsx-in-depth.html#user-defined-components-must-be-capitalized

* 일반적으로 새 React 앱은 최상위에 단일 App 컴포넌트를 가지고 있습니다. 하지만 기존 앱에 React를 통합하는 경우에는 Button과 같은 작은 컴포넌트부터 시작해서 뷰 계층의 상단으로 올라가면서 점진적으로 작업해야 할 수 있습니다.

*자세한 컴포넌트 API 레퍼런스는 여기
https://ko.reactjs.org/docs/react-component.html

* onClick={() => alert('click')}이 어떻게 동작하는지 살펴보면 onClick prop으로 함수를 전달하고 있습니다. React는 클릭했을 때에만 이 함수를 호출할 것입니다. () =>을 잊어버리고 onClick={alert('click')}이라고 작성하는 것은 자주 발생하는 실수이며 컴포넌트가 다시 렌더링할 때마다 경고 창을 띄울 것입니다.

* setstate 하면, 자동으로 state에 해당 속성이 추가됨.

* JavaScript 클래스에서 하위 클래스의 생성자를 정의할 때 항상 super를 호출해야합니다. 모든 React 컴포넌트 클래스는 생성자를 가질 때 super(props) 호출 구문부터 작성해야 합니다.

* https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Classes

* constructor 메서드는 class 로 생성된 객체를 생성하고 초기화하기 위한 특수한 메서드입니다.  "constructor" 라는 이름을 가진 특수한 메서드는 클래스 안에 한 개만 존재할 수 있습니다. 만약 클래스에 여러 개의 constructor 메서드가 존재하면 SyntaxError 가 발생할 것입니다.

constructor는 부모 클래스의 constructor를 호출하기 위해 super 키워드를 사용할 수 있습니다.

* ??? 부모 클래스??
super(props) 예제가 필요하다. (음... 그거?)

*** state!!

* props 넘겨주기
https://ko.reactjs.org/tutorial/tutorial.html#passing-data-through-props

* 모든 React 컴포넌트는 자신의 props를 다룰 때 반드시 순수 함수처럼 동작해야 합니다.

* JSX의 중괄호 안에는 유효한 모든 JavaScript 표현식을 넣을 수 있습니다. 예를 들어 2 + 2, user.firstName 또는 formatName(user) 등은 모두 유효한 JavaScript 표현식입니다.

* SEO 문제점. / 책 보고 매일 연습좀 해야할 듯.

* JSX
https://ko.reactjs.org/docs/introducing-jsx.html

* 안에다가 쓸때는, 그냥 괄호 이다. (ex. return, render.)

* class는 render / function은 return이다.

* Javascrip class : https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Classes#Constructor_(%EC%83%9D%EC%84%B1%EC%9E%90)

* 호이스팅 : https://developer.mozilla.org/ko/docs/Glossary/Hoisting

* 함수 선언과 클래스 선언의 중요한 차이점은 함수 선언의 경우 호이스팅이 일어나지만, 클래스 선언은 그렇지 않다는 것입니다. 클래스를 사용하기 위해서는 클래스를 먼저 선언 해야 합니다. 그렇지 않으면, 다음 코드는 ReferenceError를 던질 것입니다. :

* super : https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/super

*get, set, super에 대해서 알고 싶구먼. (get, set..)

*extends로 넘겨 받을경우에 super!

* 생성주기 메서드

* this.state를 지정할 수 있는 유일한 공간은 바로 constructor입니다.

* state는 병합됩니다. 병합은 얕게 이루어지기 때문에 this.setState({comments})는 this.state.posts에 영향을 주진 않지만 this.state.comments는 완전히 대체됩니다. 

*일반적으로 이를 “하향식(top-down)” 또는 “단방향식” 데이터 흐름이라고 합니다. 모든 state는 항상 특정한 컴포넌트가 소유하고 있으며 그 state로부터 파생된 UI 또는 데이터는 오직 트리구조에서 자신의 “아래”에 있는 컴포넌트에만 영향을 미칩니다. 
https://ko.reactjs.org/docs/state-and-lifecycle.html#the-data-flows-down

* state 예제 / 생명주기 메서드

* 바인딩 이란?
https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Function/bind

함수를 인자로 바인딩 하는 것이 아닐까..?

*
const numbers = [1, 2, 3, 4, 5];
const doubled = numbers.map((number) => number * 2);console.log(doubled);

*Key를 선택하는 가장 좋은 방법은 리스트의 다른 항목들 사이에서 해당 항목을 고유하게 식별할 수 있는 문자열을 사용하는 것입니다. 대부분의 경우 데이터의 ID를 key로 사용합니다.

* 항목의 순서가 바뀔 수 있는 경우 key에 인덱스를 사용하는 것은 권장하지 않습니다. 
key는 스트링으로..인듯

* 키는 주변 배열의 context에서만 의미가 있습니다.
예를 들어 ListItem 컴포넌트를 추출 한 경우 ListItem 안에 있는 <li> 엘리먼트가 아니라 배열의 <ListItem /> 엘리먼트가 key를 가져야 합니다.

* Key는 배열 안에서 형제 사이에서 고유해야 하고 전체 범위에서 고유할 필요는 없습니다. 두 개의 다른 배열을 만들 때 동일한 key를 사용할 수 있습니다.

* 위 예제에서 Post 컴포넌트는 props.id를 읽을 수 있지만 props.key는 읽을 수 없습니다.

* function ListItem(props) {
  return <li>{props.value}</li>;
}

function NumberList(props) {
  const numbers = props.numbers;
  return (
    <ul>
      {numbers.map((number) =>
        <ListItem key={number.toString()}
                  value={number} />
      )}
    </ul>
  );
}

const numbers = [1, 2, 3, 4, 5];
ReactDOM.render(
  <NumberList numbers={numbers} />,
  document.getElementById('root')
);

*

=====




-----

### 여기까지 읽음
https://ko.reactjs.org/docs/components-and-props.html


### 생활코딩 자바스크립트
https://opentutorials.org/course/50/175



----
### 게임 만들기
css를 html에는 안 추가해 줘도 괜찮은 건지?


컴포넌트에서 아래 내용은
this.props.value : 이걸 통해서 온 애를 받겠다. 이런뜻이지.

this는 여기에 있는걸 쓰겠다는 뜻인듯.

https://ko.reactjs.org/tutorial/tutorial.html#passing-data-through-props



-------
* 그냥 궁금한것
- what is the classList

- render()와 Return의 차이.

: render에서 return 부분이 나오는 건 알 것 같은데 

** state !!

-----
## 정말이지 자습서가 필요한 것 같다.


-------


 함수 컴포넌트와 클래스 컴포넌트 둘 다 몇 가지 추가 기능이 있으며 이에 대해서는 다음 장에서 설명합니다.


 ====

 뭐가 좋은 패턴일까?
 react /js6 / 패턴

 [아래꺼는 다음주꺼일지도..음..어찌되었든지 간에]
 node.js랑 통신하는 것
 API를 써서 customizing하는 것


=========
암만해도.. ㅋㅋㅋㅋㅋ
뭐. 다 연습하고, 이거할 수 있으면 최종 보스 깬거일듯

----
이번주에는 자바스크립트랑 리액트로 족하다고 보는데..?!ㅋㅋㅋㅋㅋ
몰라 ㅋㅋㅋㅋㅋ



일단은, 해보고 나서 생각을 하자. 한 단계씩..

----
담주에 노드랑 연결해서 하는거랑(생활코딩),
파이썬을 볼 수 있음 하던지

----
graphql이랑, map은 그냥 중간에 보고 그것만 고치면 좋겠네 




 branch를 가져가서 작업 하는 건 어떨까.. 그건 별로인 생각인 걸까???
(gatsby와[router] / material-ui에 대해서는 나중에 생각해 보자.)

------
아, 맞다. 이력서 업데이트 해놓고, 
음.. 그외에는 모르겠다. 레딧이나 좀 읽고.. 그냥 말아야지.

It's the first payday in cochl. Tnaks, sir!


===========









