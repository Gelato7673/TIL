Stand by Music swapper 

* Changed note
처음 뮤직스와퍼를 시작했을때, 나는 단지 기술적인 문제에만 집중하면 될 것이라고 생각했었다. 
그러나, 프로젝트가 진행되면서 이 프로젝트가 가지고 있는 좀 더 본질적인 문제에 직면하게 되었다. 
내가 생각하기에, 우리가 생각해 보아야 할 가장 큰 문제는, 이 서비스가 추구하고 있는 real-time service의 개념이 현재 우리의 시스템이 설계되어있는 상황에는 적합하지 않다는 점 이었다. (토마스 article related)

우리는, 이러한 상황적 부조화가 있었기 때문에 우리는 초기 디자인에서 다음과 같은 부분을 더하거나 빼기로 지난 회의에서 결정했었다. 

[real-time 시스템이 아니라는 가정하에 변경하기로 한 결정되었던 사항들]
1. 비디오가 업로드 된 후, analyze 된 data를 추출 하는 과정에서 Progress time이 발생한다.
- 디자인: 비디오가 업로드 중이라는 것을 어떻게 보여줄지 디자인 적으로 결정되지 않았음
  (참조사이트 : https://typito.com/)
- back : socket을 통한 progress를 개발한 것으로 보임
- front : 아직 개발하지 않았음. back 과 design resource를 확인한 후 개발 방향을 설정할 예정

2. 사용자가 직접 파일을 업로드 하는 기능을 구현하는 과정에서, 바로 사용자가 업로드한 파일을 delay없이 streaming service로 변환해서 제공하는 것은 불가능 하다. 
또한, 이 서비스는 기존의 추천시스템과는 성격의 차이가 있는 optional한 방법임으로 이번분기에 개발하지 않기로 결정하였다.

3. Exporting 시스템
사용자가 최종 음악을 모두 선택한 후에, merging 되는 과정이 바로 이루어 질 수 없다. 
우리는 이러한 점을 사용자에게 알릴 필요가 있으며, merge가 모두 되고 나서는 그 사실을 사용자에게 알려주는 방향으로 변경하기로 했다. 

4. change the ui

이외에도, 우리는 여러가지 사항들을 고려하여 초기디자인에서 다음과 같은 사항을 제외하거나 수정하기로 하였었다.

[그외의 이유들로 변경하기로 한 사항들]
- Dimension은 변경하지 않기로 했다. 

그외에도, 이러한 상황들과 front-end의 상황들이 맞물며 몇가지 이슈가 더 남아있고, 우리는 다음 시작전에 이 부분에 대해서 논의해야 한다고 생각한다. 
- hls problem
- removed sound data
- sound wave
- silent section

------------------------------------

* Suggestion
또한, 우리는 프로젝트를 진행하면서 하나의 페이지를 더 만들게 되었는데, 이 페이지를 포함한 기존의 프로세스는 다음과 같다. 
이 문제에는 hls problem과 두가지 문제가 있다.
(사용자가 비디오를 업로드하고, Separate page 로 넘어갈때 까지 / 이미지로 대체하자)

1. 사용자가 비디오를 업로드 한다 
2. 업로드한 비디오가 분석되어지는 것을 기다린다 (progress)
3. 비디오에서 추출된 두개 중 한가지가 제거된 sound를 play해볼 수 있도록 만들어 준다.
4. 그다음 단계에서, 사용자는 비디오와 오디오 소스를 보고 편집을 할 수 있게 되고, 이때 토글 버튼을 통해 3번에서 선택한 sound removed version을 적용시킬 수 있도록 해준다. 

여기서 문제가 되는 부분은 3번에서 4번으로 넘어가는 부분인데, 

option 1) 두개의 다른 media source를 쓰는 것이다. 
이 부분이 우리가 처음에 사용하려고 했던 부분인데, 
이렇게 할 경우 
1. back-end 에서는 처음에 추출한 두개의 removed sounds외에 original sound를 함께 추출해 내야 하고
2. front-end에서는 두개의 media의 synce를 맞춰야 한다. 
   만약, 둘중에 하나만 hls streaming 방식을 이용한다면, 한개의 안정적인 데이터를 버퍼를 가진 streaming 데이터에 맞춰주면 됨으로, 가능하다고 생각해서 이 방식으로 개발하게 되었다.
   그러나, 만약 두개의 media가 모두 hls streaming service를 이용할 경우, 상황이 달라지는데, 
   이는 인터넷 상태에 따라서 양쪽이 다른 buffering timing을 가지게 될 것이고, 서로다른 buffering synce를 맞추기 위해서 계속 buffering timing이 길어지는 결과를 가져올 수 있을 것 같다.

option 2) 한개의 media source를 쓰는 것이다. 
이렇게 할 경우
1. back-end에서는 select-page에서 유저가 선택한 음원을 영상에다가 합쳐줘야 하고, 이 과정을 처리하는 데, 시간이 꽤 걸리기 때문에, 유저는 기다려야만 한다. 
2. 그러나, front-end에서는 media source가 하나로 오기때문에, 2개의 streaming service로 인해 buffering이 배가 되는 현상을 피할 수 있다.

option 3) 음악 소스 파일을 streaming service에서 chunk방식으로 받는 것이 아닌, mp4같이 한번에 받는 방식을 사용한다. 이럴경우 소스파일을 받는 시간이 꽤 느려진다. hls외에 빠른 방식은 아직 찾지 못했다. (이슈참조)

option 4) 음악 소스를 선택해서 합치는 기능과, 미디어의 음원 부분부분을 선택하고, merge하는 기능을 분리한다.
이렇게 변경할 경우, 순서는 다음과 같이 변한다. 

1. 사용자가 비디오를 업로드 한다. -> 분석되어지는 것을 기다린다(progress)
2. 파일을 누르면 -> 두가지 옵션이 뜬다. 한가지는 removed sound를 선택하는 옵션, 두번째는 일반 separate page로 진입하는 옵션.
3. 사용자의 갈림길에 따라서, 실행해 주고, 최종파일을 merge 해준다. 

이렇게 할 경우, 사용자는 너무 오랜 시간을 기다릴 필요가 없어지고, 만약 removed sound만 원하는 사용자는 그 다음 과정을 갈 필요가 없어진다. 
나는 그래서, 4번 option을 제안하는 바이다. 

------------------------------------

* Sound wave
[Hls problem]
이미 이슈화 되어있는 이야기 이지만, front-end 사이드에서 좀 더 이 문제에 관해서 언급하자면, 
- Cors problem
- get data by chunk
- hls is not supported on basic browser

만약, 우리가 4번 옵션을 선택한다고 했을때, hls가 data를 chunk로 가지고 오기 떄문에 buffering이 두배가 되는 기존의 문제점은 사라지게 된다. 그렇지만, soundwave의 경우, data를 chunk로 가져오게 되면, 

option 1) 사운드 웨이브를 chunk단위로 가지고 와야 한다. => 매번 다시 wave를 rendering 해야한다. 
option 2) 사운드 웨이브를 서버에서 data를 보내준다 => 한번에 rendering 가능.
추가적으로, browser가 soundwave를 분석하는 속도의 차이가 나기 때문에, 만약 hls를 계속해서 사용한다면, 이 부분을 요청하게 될 것 같다. 
찾아본 바로는, soundwave를 분석해 주는 모듈들이 있는 것 같다. go 언어에서 찾은건 아니지만, 만약 찾는다면 가능할 것이라고 생각된다.

------------------------------------

* Silent section
현재 soundwave에서 silent section을 선택하게 될 수가 있는데, 이때는 마땅히 추천하는 음악이 뜨지 않는다. 
그런데, 더욱 문제가 되는 것은, 음악 구간이 아니더라도 소리가 감지되면, 그 소리에 맞춰서 소리가 뜬다는 점이다. 
따라서, 유저 입장에서는 음악이 없는 어떠한 구간은 소리가 뜨고, 또 어떠한 구간은 소리가 안뜨는 것으로 인지될 것이다. 
suggestion) 따라서, 아무 소리도 인지되지 않는 구간에서, 우리는 랜덤으로 라도 소리를 추천해 줄 필요가 있다고 생각되어진다. 


------------------------------------

About Front-end code
1. tsx 와 js 가 섞여 있는 문제점
2. 가짜 데이터를 사용하고 있는 문제점 => 원래 데이터로 가져왔을때는?
   1) video 모듈의 경우, hls data에서도 돌아가도록 해두었다. 근데..? 왜? insomnia에서 온 url로는 안 되는가? 생각해봐야하는 점 이다.
   2) soundwave maker의 경우, 이 soundwave 모듈 (wavesurfer)는 mp4 등에서는 작동을 하지만, hls에서는 작동을 하지 않는다. 
추측하기로는 이 모듈은 한번에 parsing을 하는데, hls에서는 한번에 오지 않기 때문 인 것 같다. [이 부분에 대해서는, 이슈를 참조하자.]

* 코드를 정리해서 development에다가 저장하면 좋을 것 같다.







